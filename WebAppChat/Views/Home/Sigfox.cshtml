@model IEnumerable<WebAppChat.Models.IOTSigfox>

@{
    ViewBag.Title = "Sigfox";
}

<h2>Sigfox</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<div class="row">
    Numbers of Online Users    <strong id="counter" > </strong>
    <div class="container">
        <input type="text" id="message" />
        <input type="button" id="sendmessage" value="Send" />
        <input type="hidden" id="displayname" />
        <ul id="discussion"></ul>
    </div>

    @section scripts {
        <!--Script references. -->
    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
        <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
        <script src="~/Scripts/jquery-1.10.2.js"></script>
        <!--Reference the SignalR library. -->
        <script src="~/Scripts/jquery.signalR-2.2.1.js"></script>
        <!--Reference the autogenerated SignalR hub script. -->
        <script src="~/signalr/hubs"></script>
        <!--SignalR script to update the chat page and send messages.-->
        <script>
        $(function () {
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.chatHub;
            // Create a function that the hub can call back to display messages.
            chat.client.gocounter = function (counter) {
                $('#counter').text(counter);
            };
            chat.client.addNewMessageToPage = function (name, message) {
                // Add the message to the page.
                $('#discussion').append('<li><strong>' + htmlEncode(name)
                    + '</strong>: ' + htmlEncode(message) + '</li>');
            };
            chat.client.updateSigfox = function (device, time, data, snr, linkQuality) {
                // Add the message to the page.
                $('#discussion').append('<li><strong>' + htmlEncode(data)
                    + '</strong>: ' + htmlEncode(time) + htmlEncode(device) + htmlEncode(snr) + htmlEncode(linkQuality) + '</li>');
               
                var row = '<tr><td>' + device + '</td><td>' + time + '</td><td>' + data + '</td><td>' + snr + '</td><td>' + linkQuality + '</td></tr>';
                $("#tabledata tr:first").after(row);
               $("#tabledata  tr:eq(1)").css("background-color", "red");

                setTimeout(function () {
                    $("#tabledata  tr:eq(1)").css("background-color", "aqua").effect("highlight", {}, 3000);
                }, 2000);
            //    $("#tabledata tr:first").after(row);
            };
           
            //hover
            $("tr").not(':first').hover(
              function () {
                  $(this).css("background", "yellow");
              },
              function () {
                  $(this).css("background", "");
              }
            );
            /////

            // Get the user name and store it to prepend to messages.
            $('#displayname').val(prompt('Enter your name:', ''));
            // Set initial focus to message input box.
            $('#message').focus();
            // Start the connection.
            $.connection.hub.start().done(function () {
                $('#sendmessage').click(function () {
                    // Call the Send method on the hub.
                    chat.server.send($('#displayname').val(), $('#message').val());
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                });
            });
        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
        </script>
    }


</div>
<table class="table" id="tabledata">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.device)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.time)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.data)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.snr)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.linkQuality)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.device)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.time)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.data)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.snr)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.linkQuality)
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) |
            @Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) |
            @Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })
        </td>
    </tr>
}

</table>
